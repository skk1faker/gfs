// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gfs_server.proto

#include "gfs_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ChunkServer {
constexpr VoidMessage::VoidMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VoidMessageDefaultTypeInternal {
  constexpr VoidMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoidMessageDefaultTypeInternal() {}
  union {
    VoidMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoidMessageDefaultTypeInternal _VoidMessage_default_instance_;
constexpr HeartBeat::HeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunkaddlist_()
  , _chunkaddlist_cached_byte_size_(0)
  , chunkdellist_()
  , _chunkdellist_cached_byte_size_(0)
  , worktimes_(0)
  , chunkaddcount_(0){}
struct HeartBeatDefaultTypeInternal {
  constexpr HeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartBeatDefaultTypeInternal() {}
  union {
    HeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
}  // namespace ChunkServer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gfs_5fserver_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gfs_5fserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gfs_5fserver_2eproto = nullptr;

const uint32_t TableStruct_gfs_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkServer::VoidMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChunkServer::HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChunkServer::HeartBeat, worktimes_),
  PROTOBUF_FIELD_OFFSET(::ChunkServer::HeartBeat, chunkaddcount_),
  PROTOBUF_FIELD_OFFSET(::ChunkServer::HeartBeat, chunkaddlist_),
  PROTOBUF_FIELD_OFFSET(::ChunkServer::HeartBeat, chunkdellist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChunkServer::VoidMessage)},
  { 6, -1, -1, sizeof(::ChunkServer::HeartBeat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChunkServer::_VoidMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChunkServer::_HeartBeat_default_instance_),
};

const char descriptor_table_protodef_gfs_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gfs_server.proto\022\013ChunkServer\"\r\n\013VoidM"
  "essage\"a\n\tHeartBeat\022\021\n\tworktimes\030\001 \001(\005\022\025"
  "\n\rchunkaddcount\030\002 \001(\005\022\024\n\014chunkaddlist\030\003 "
  "\003(\003\022\024\n\014chunkdellist\030\004 \003(\0032S\n\014ChunkServic"
  "e\022C\n\rget_heartbeat\022\030.ChunkServer.VoidMes"
  "sage\032\026.ChunkServer.HeartBeat\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gfs_5fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gfs_5fserver_2eproto = {
  false, false, 238, descriptor_table_protodef_gfs_5fserver_2eproto, "gfs_server.proto", 
  &descriptor_table_gfs_5fserver_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_gfs_5fserver_2eproto::offsets,
  file_level_metadata_gfs_5fserver_2eproto, file_level_enum_descriptors_gfs_5fserver_2eproto, file_level_service_descriptors_gfs_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gfs_5fserver_2eproto_getter() {
  return &descriptor_table_gfs_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gfs_5fserver_2eproto(&descriptor_table_gfs_5fserver_2eproto);
namespace ChunkServer {

// ===================================================================

class VoidMessage::_Internal {
 public:
};

VoidMessage::VoidMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ChunkServer.VoidMessage)
}
VoidMessage::VoidMessage(const VoidMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChunkServer.VoidMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoidMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoidMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VoidMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gfs_5fserver_2eproto_getter, &descriptor_table_gfs_5fserver_2eproto_once,
      file_level_metadata_gfs_5fserver_2eproto[0]);
}

// ===================================================================

class HeartBeat::_Internal {
 public:
};

HeartBeat::HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chunkaddlist_(arena),
  chunkdellist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChunkServer.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunkaddlist_(from.chunkaddlist_),
      chunkdellist_(from.chunkdellist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&worktimes_, &from.worktimes_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunkaddcount_) -
    reinterpret_cast<char*>(&worktimes_)) + sizeof(chunkaddcount_));
  // @@protoc_insertion_point(copy_constructor:ChunkServer.HeartBeat)
}

inline void HeartBeat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worktimes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chunkaddcount_) -
    reinterpret_cast<char*>(&worktimes_)) + sizeof(chunkaddcount_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:ChunkServer.HeartBeat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeat::ArenaDtor(void* object) {
  HeartBeat* _this = reinterpret_cast< HeartBeat* >(object);
  (void)_this;
}
void HeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:ChunkServer.HeartBeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunkaddlist_.Clear();
  chunkdellist_.Clear();
  ::memset(&worktimes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunkaddcount_) -
      reinterpret_cast<char*>(&worktimes_)) + sizeof(chunkaddcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 worktimes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          worktimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 chunkaddcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          chunkaddcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 chunkaddlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunkaddlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_chunkaddlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 chunkdellist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chunkdellist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_chunkdellist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChunkServer.HeartBeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 worktimes = 1;
  if (this->_internal_worktimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_worktimes(), target);
  }

  // int32 chunkaddcount = 2;
  if (this->_internal_chunkaddcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_chunkaddcount(), target);
  }

  // repeated int64 chunkaddlist = 3;
  {
    int byte_size = _chunkaddlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_chunkaddlist(), byte_size, target);
    }
  }

  // repeated int64 chunkdellist = 4;
  {
    int byte_size = _chunkdellist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_chunkdellist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChunkServer.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChunkServer.HeartBeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 chunkaddlist = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->chunkaddlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunkaddlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 chunkdellist = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->chunkdellist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunkdellist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 worktimes = 1;
  if (this->_internal_worktimes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_worktimes());
  }

  // int32 chunkaddcount = 2;
  if (this->_internal_chunkaddcount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_chunkaddcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartBeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeat::GetClassData() const { return &_class_data_; }

void HeartBeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeartBeat *>(to)->MergeFrom(
      static_cast<const HeartBeat &>(from));
}


void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChunkServer.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chunkaddlist_.MergeFrom(from.chunkaddlist_);
  chunkdellist_.MergeFrom(from.chunkdellist_);
  if (from._internal_worktimes() != 0) {
    _internal_set_worktimes(from._internal_worktimes());
  }
  if (from._internal_chunkaddcount() != 0) {
    _internal_set_chunkaddcount(from._internal_chunkaddcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChunkServer.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chunkaddlist_.InternalSwap(&other->chunkaddlist_);
  chunkdellist_.InternalSwap(&other->chunkdellist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeat, chunkaddcount_)
      + sizeof(HeartBeat::chunkaddcount_)
      - PROTOBUF_FIELD_OFFSET(HeartBeat, worktimes_)>(
          reinterpret_cast<char*>(&worktimes_),
          reinterpret_cast<char*>(&other->worktimes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gfs_5fserver_2eproto_getter, &descriptor_table_gfs_5fserver_2eproto_once,
      file_level_metadata_gfs_5fserver_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChunkServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChunkServer::VoidMessage* Arena::CreateMaybeMessage< ::ChunkServer::VoidMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkServer::VoidMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChunkServer::HeartBeat* Arena::CreateMaybeMessage< ::ChunkServer::HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChunkServer::HeartBeat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
